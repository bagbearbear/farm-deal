# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'


    - uses: samin/mysql-action@v1.1
      name: MySQL Service
      with:
        host port: 3306 # Optional, default value is 3306. The port of host
        character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
        collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
        mysql version: '8.0' # Optional, default value is "latest". The version of the MySQL
        mysql database: farmdeal # Optional, default value is "test". The specified database which will be create
        mysql user: ${{ secrets.DB_USERNAME }} # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Of course you can use secrets, too
        mysql password: ${{ secrets.DB_PASSWORD }}

    - name: application.properties 파일 생성
      run: |
        mkdir -p ./src/main/resources
        echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.properties

    - name: application-awss3.yml 파일 생성
      run: |
        echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application-awsS3.yml
      shell: bash

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@ec92e829475ac0c2315ea8f9eced72db85bb337a # v3.0.0


    - name: Build with Gradle
      run: ./gradlew clean build --debug
        ## 이미지 태그에 시간 설정을 하기위해서 현재 시간을 가져옵니다.
    - name: Get current time
      uses: 1466587594/get-current-time@v2
      id: current-time
      with:
        format: YYYY-MM-DDTHH-mm-ss
        utcOffset: "+09:00"

    - name: Show Current Time
      run: echo "CurrentTime=${{steps.current-time.outputs.formattedTime}}"
        ## AWS에 로그인합니다. aws-region은 서울로 설정(ap-northeast-2)했습니다
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
    ## ECR에 로그인합니다
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
        ## sample라는 ECR 리파지터리에 현재 시간 태그를 생성하고, 푸쉬합니다. xxx부분은 본인의 레파지터리 주소입니다.
        ## 앞의 스탭에서 ${{steps.current-time.outputs.formattedTime}}로 현재 시간을 가져옵니다.
    # ECR 푸시
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: farmdeal
        #IMAGE_TAG: 0.0.1
        IMAGE_TAG: ${{steps.current-time.outputs.formattedTime}}
      run: |
        docker buildx build --platform=linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"